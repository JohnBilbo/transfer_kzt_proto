// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: transfer_kzt_grpc/transfer_kzt_grpc.proto

package transfer_kzt_grpc_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestTransfer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор сущности перевод
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Канал создания платежа
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Уникальный идентификатор партнера, с приложения которого был совершен платеж
	PartnerId string `protobuf:"bytes,3,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	// Дата валютирования [pattern: dd-MM-yyyy, example: 01-01-2023], REQUIRED
	ValueDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=value_date,json=valueDate,proto3" json:"value_date,omitempty"`
	// Дата документа [pattern: dd-MM-yyyy, example: 01-01-2023]
	DocDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=doc_date,json=docDate,proto3" json:"doc_date,omitempty"`
	// Время отправки [pattern: dd-MM-yyyy HH:mm:ss, example: 01-01-2023 13:13:13]
	TimeSent *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time_sent,json=timeSent,proto3" json:"time_sent,omitempty"`
	// Счёт списания комиссии
	CommissionAccount string `protobuf:"bytes,7,opt,name=commission_account,json=commissionAccount,proto3" json:"commission_account,omitempty"`
	// Номер документа
	NDoc string `protobuf:"bytes,8,opt,name=n_doc,json=nDoc,proto3" json:"n_doc,omitempty"`
	// Сумма TODO стоит ли оставлять данное поле в типе плавающей точки? Для денег лучше строку использовать
	Amount float64 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`
	// Валюта
	Currency string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	// КНП (Код назначения платежа) [Макс кол-во символов 3, мин кол-во символов 3]
	Knp string `protobuf:"bytes,11,opt,name=knp,proto3" json:"knp,omitempty"`
	// КБК
	TaxCode string `protobuf:"bytes,12,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
	// Отправитель(и)
	Sender *Sender `protobuf:"bytes,13,opt,name=sender,proto3" json:"sender,omitempty"`
	// Получатель(и)
	Receiver *Receiver `protobuf:"bytes,14,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Электронная подпись XML первого подписанта [example: XML с подписью NCA]
	SignatureA string `protobuf:"bytes,15,opt,name=signature_a,json=signatureA,proto3" json:"signature_a,omitempty"`
	// Электронная подпись XML второго подписанта [example: XML с подписью NCA]
	SignatureB string `protobuf:"bytes,16,opt,name=signature_b,json=signatureB,proto3" json:"signature_b,omitempty"`
	// Произвольное назначение платежа, заполняется клиентом [example: Оплата пенсионных взносов за сотрудников]
	NarrativeFirst string `protobuf:"bytes,17,opt,name=narrative_first,json=narrativeFirst,proto3" json:"narrative_first,omitempty"`
	// Назначение платежа [example: Единый платеж]
	Narrative string `protobuf:"bytes,18,opt,name=narrative,proto3" json:"narrative,omitempty"`
	// Тип платежа [example: INTERNAL, EXTERNAL, BUDGET, MEDICAL, PENSION, MEDICAL_REMAND, SOCIAL, SALARY, STANDARD_CARD,
	// VOLUNTARY_PENSION, STANDARD_CARD_BANK, SINGLE, MANDATORY_EMPLOYER_PENSION, ANNUITY_PENSION, INSURANCE,
	// PRE_PENSION_ANNUITY_INSURANCE_PAYMENTS, EMPLOYER_PROFESSIONAL_PAYMENTS, KAZ_RAILWAYS_UNIFIED_PERSONAL_ACCOUNT,
	// DIGITAL_TENGE_INTERNAL, DIGITAL_TENGE_BUDGET ]
	Type string `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty"`
	// Подтип платежа
	SubType string `protobuf:"bytes,20,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	// Код клиента [example: 694638]
	ClientCode string `protobuf:"bytes,21,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`
	// Период [pattern: dd-MM-yyyy, example: 01-01-2023]
	Period *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=period,proto3" json:"period,omitempty"`
	// Подразделение [example: AF1]
	Division string `protobuf:"bytes,23,opt,name=division,proto3" json:"division,omitempty"`
	// Идентификатор владельца [example: 31234]
	CustomerId int64 `protobuf:"varint,24,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Состояние(Статус) платежа [ CREATED, CONFIRMED, APPROVED, APPROVED_HALF, SENDED, BANK_ACCEPTED, APPROVED_BANK,
	// EXECUTED, ERROR, ANTIFRAUD_ERROR, DELETED, PARTIALLY_SIGNED, SIGNED, PRESENDED, DRAFT ]
	State string `protobuf:"bytes,25,opt,name=state,proto3" json:"state,omitempty"`
	// Признак срочного платежа [example: false]
	IsUrgent bool `protobuf:"varint,26,opt,name=is_urgent,json=isUrgent,proto3" json:"is_urgent,omitempty"`
	// НДС [example: 0]
	Nds int32 `protobuf:"varint,27,opt,name=nds,proto3" json:"nds,omitempty"`
	// Текст ошибки [example: Ошибка текст]
	ErrorText string `protobuf:"bytes,28,opt,name=error_text,json=errorText,proto3" json:"error_text,omitempty"`
	// Определяет, расходуются ли бонусы при платеже [example: true, nullable: true]
	SpendBonuses bool `protobuf:"varint,29,opt,name=spend_bonuses,json=spendBonuses,proto3" json:"spend_bonuses,omitempty"`
	// Список сотрудников
	EmployeeList  []*Employee `protobuf:"bytes,30,rep,name=employee_list,json=employeeList,proto3" json:"employee_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestTransfer) Reset() {
	*x = RequestTransfer{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTransfer) ProtoMessage() {}

func (x *RequestTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTransfer.ProtoReflect.Descriptor instead.
func (*RequestTransfer) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *RequestTransfer) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RequestTransfer) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *RequestTransfer) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

func (x *RequestTransfer) GetValueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

func (x *RequestTransfer) GetDocDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DocDate
	}
	return nil
}

func (x *RequestTransfer) GetTimeSent() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeSent
	}
	return nil
}

func (x *RequestTransfer) GetCommissionAccount() string {
	if x != nil {
		return x.CommissionAccount
	}
	return ""
}

func (x *RequestTransfer) GetNDoc() string {
	if x != nil {
		return x.NDoc
	}
	return ""
}

func (x *RequestTransfer) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RequestTransfer) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *RequestTransfer) GetKnp() string {
	if x != nil {
		return x.Knp
	}
	return ""
}

func (x *RequestTransfer) GetTaxCode() string {
	if x != nil {
		return x.TaxCode
	}
	return ""
}

func (x *RequestTransfer) GetSender() *Sender {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *RequestTransfer) GetReceiver() *Receiver {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *RequestTransfer) GetSignatureA() string {
	if x != nil {
		return x.SignatureA
	}
	return ""
}

func (x *RequestTransfer) GetSignatureB() string {
	if x != nil {
		return x.SignatureB
	}
	return ""
}

func (x *RequestTransfer) GetNarrativeFirst() string {
	if x != nil {
		return x.NarrativeFirst
	}
	return ""
}

func (x *RequestTransfer) GetNarrative() string {
	if x != nil {
		return x.Narrative
	}
	return ""
}

func (x *RequestTransfer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestTransfer) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *RequestTransfer) GetClientCode() string {
	if x != nil {
		return x.ClientCode
	}
	return ""
}

func (x *RequestTransfer) GetPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *RequestTransfer) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *RequestTransfer) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *RequestTransfer) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *RequestTransfer) GetIsUrgent() bool {
	if x != nil {
		return x.IsUrgent
	}
	return false
}

func (x *RequestTransfer) GetNds() int32 {
	if x != nil {
		return x.Nds
	}
	return 0
}

func (x *RequestTransfer) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *RequestTransfer) GetSpendBonuses() bool {
	if x != nil {
		return x.SpendBonuses
	}
	return false
}

func (x *RequestTransfer) GetEmployeeList() []*Employee {
	if x != nil {
		return x.EmployeeList
	}
	return nil
}

// Sender - отправитель
type Sender struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ИИН отправителя [minLength: 1, example: 940302300403], REQUIRED
	Idn string `protobuf:"bytes,1,opt,name=idn,proto3" json:"idn,omitempty"`
	// Имя отправителя
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// БИК отправителя [example: GCVPKZ2A]
	BankIdentifierCode string `protobuf:"bytes,3,opt,name=bank_identifier_code,json=bankIdentifierCode,proto3" json:"bank_identifier_code,omitempty"`
	// Счёт отправителя [example: KZ128560000000517854]
	AccountNumber string `protobuf:"bytes,4,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	// Код отправителя [example: 17]
	Code string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// ISO код страны плательщика фактического бенефициара
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	// Банк
	Bank *Bank `protobuf:"bytes,7,opt,name=bank,proto3" json:"bank,omitempty"`
	// Признак платежа за 3 лицо фактического бенефициара
	IsThirdPartyPayment bool `protobuf:"varint,8,opt,name=is_third_party_payment,json=isThirdPartyPayment,proto3" json:"is_third_party_payment,omitempty"`
	// Посредник
	Intermediary  *Intermediary `protobuf:"bytes,9,opt,name=intermediary,proto3" json:"intermediary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sender) Reset() {
	*x = Sender{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sender) ProtoMessage() {}

func (x *Sender) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sender.ProtoReflect.Descriptor instead.
func (*Sender) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *Sender) GetIdn() string {
	if x != nil {
		return x.Idn
	}
	return ""
}

func (x *Sender) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sender) GetBankIdentifierCode() string {
	if x != nil {
		return x.BankIdentifierCode
	}
	return ""
}

func (x *Sender) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *Sender) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Sender) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Sender) GetBank() *Bank {
	if x != nil {
		return x.Bank
	}
	return nil
}

func (x *Sender) GetIsThirdPartyPayment() bool {
	if x != nil {
		return x.IsThirdPartyPayment
	}
	return false
}

func (x *Sender) GetIntermediary() *Intermediary {
	if x != nil {
		return x.Intermediary
	}
	return nil
}

// Receiver - Получатель(и)
type Receiver struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ИИН бенефициара [minLength: 1, example: 940302300403], REQUIRED
	Idn string `protobuf:"bytes,1,opt,name=idn,proto3" json:"idn,omitempty"`
	// Имя бенефициара
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// БИК бенефициара [example: GCVPKZ2A]
	BankIdentifierCode string `protobuf:"bytes,3,opt,name=bank_identifier_code,json=bankIdentifierCode,proto3" json:"bank_identifier_code,omitempty"`
	// Счёт бенефициара [example: KZ128560000000517854]
	AccountNumber string `protobuf:"bytes,4,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	// Код бенефициара [example: 17]
	Code string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// ISO код страны фактического бенефициара
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	// Банк
	Bank *Bank `protobuf:"bytes,7,opt,name=bank,proto3" json:"bank,omitempty"`
	// Признак платежа 3-му лицу бенефициара.
	IsThirdPartyPayment bool `protobuf:"varint,8,opt,name=is_third_party_payment,json=isThirdPartyPayment,proto3" json:"is_third_party_payment,omitempty"`
	// Получатель бенефициар (посредник)
	Intermediary  *Intermediary `protobuf:"bytes,9,opt,name=intermediary,proto3" json:"intermediary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Receiver) Reset() {
	*x = Receiver{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Receiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receiver) ProtoMessage() {}

func (x *Receiver) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receiver.ProtoReflect.Descriptor instead.
func (*Receiver) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *Receiver) GetIdn() string {
	if x != nil {
		return x.Idn
	}
	return ""
}

func (x *Receiver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Receiver) GetBankIdentifierCode() string {
	if x != nil {
		return x.BankIdentifierCode
	}
	return ""
}

func (x *Receiver) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *Receiver) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Receiver) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Receiver) GetBank() *Bank {
	if x != nil {
		return x.Bank
	}
	return nil
}

func (x *Receiver) GetIsThirdPartyPayment() bool {
	if x != nil {
		return x.IsThirdPartyPayment
	}
	return false
}

func (x *Receiver) GetIntermediary() *Intermediary {
	if x != nil {
		return x.Intermediary
	}
	return nil
}

// Bank - информация о банке
type Bank struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор [example: 435348763]
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// sub [example: "public"] TODO без понятия что это
	Sub string `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	// archival [example: "1"] TODO без понятия что это
	Archival string `protobuf:"bytes,3,opt,name=archival,proto3" json:"archival,omitempty"`
	// Наименование банка [example: "АО «Tengri Bank»"]
	BankName string `protobuf:"bytes,4,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	// Код банка, уникальный идентификатор присваиваемый центральным банком страны [example: "TNGRKZKX"]
	CodeBank string `protobuf:"bytes,5,opt,name=code_bank,json=codeBank,proto3" json:"code_bank,omitempty"`
	// Идентификатор банковского счета [example: "620"]
	IbanCode string `protobuf:"bytes,6,opt,name=iban_code,json=ibanCode,proto3" json:"iban_code,omitempty"`
	// Черный список для банков под санкциями [example: "false"]
	BlackList     string `protobuf:"bytes,7,opt,name=black_list,json=blackList,proto3" json:"black_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bank) Reset() {
	*x = Bank{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bank) ProtoMessage() {}

func (x *Bank) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bank.ProtoReflect.Descriptor instead.
func (*Bank) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *Bank) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bank) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *Bank) GetArchival() string {
	if x != nil {
		return x.Archival
	}
	return ""
}

func (x *Bank) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *Bank) GetCodeBank() string {
	if x != nil {
		return x.CodeBank
	}
	return ""
}

func (x *Bank) GetIbanCode() string {
	if x != nil {
		return x.IbanCode
	}
	return ""
}

func (x *Bank) GetBlackList() string {
	if x != nil {
		return x.BlackList
	}
	return ""
}

// Intermediary - посредник
type Intermediary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Номер налогоплательщика фактического бенефициара (РНН 3-го лица)
	TaxIdentificationNumber string `protobuf:"bytes,1,opt,name=tax_identification_number,json=taxIdentificationNumber,proto3" json:"tax_identification_number,omitempty"`
	// Наименование фактического бенефициара в платеже
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Признак юридического лица отправителя
	IsLegalEntity bool `protobuf:"varint,3,opt,name=is_legal_entity,json=isLegalEntity,proto3" json:"is_legal_entity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Intermediary) Reset() {
	*x = Intermediary{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Intermediary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intermediary) ProtoMessage() {}

func (x *Intermediary) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intermediary.ProtoReflect.Descriptor instead.
func (*Intermediary) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *Intermediary) GetTaxIdentificationNumber() string {
	if x != nil {
		return x.TaxIdentificationNumber
	}
	return ""
}

func (x *Intermediary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Intermediary) GetIsLegalEntity() bool {
	if x != nil {
		return x.IsLegalEntity
	}
	return false
}

// Employee - информация о сотруднике
type Employee struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор сущности сотрудник [example: 142334]
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Операция [example: Операция]
	Operation string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	// Дата рождения [pattern: dd-MM-yyyy, example: 01-01-2023]
	BirthDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// Фамилия
	Surname string `protobuf:"bytes,4,opt,name=surname,proto3" json:"surname,omitempty"`
	// Имя
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Отчество
	Patronymic string `protobuf:"bytes,6,opt,name=patronymic,proto3" json:"patronymic,omitempty"`
	// Счёт [example: KZ80009EP00368609101]
	Account string `protobuf:"bytes,7,opt,name=account,proto3" json:"account,omitempty"`
	// Сумма фактическая за сотрудника
	Amount int32 `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	// Ожидаемая сумма оплаты за сотрудника
	EstimatedAmount int32 `protobuf:"varint,9,opt,name=estimated_amount,json=estimatedAmount,proto3" json:"estimated_amount,omitempty"`
	// Список КНП за которые производится оплата
	KnpList []string `protobuf:"bytes,10,rep,name=knp_list,json=knpList,proto3" json:"knp_list,omitempty"`
	// ИИН
	Idn string `protobuf:"bytes,11,opt,name=idn,proto3" json:"idn,omitempty"`
	// Период (необходима нормализация, то есть в будущей версии переделать на MM-yyyy формат)
	// [pattern: dd-MM-yyyy, example: 01-01-2023]
	Period *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=period,proto3" json:"period,omitempty"`
	// Признак резиденства [example: true/false]
	IsResident bool `protobuf:"varint,13,opt,name=is_resident,json=isResident,proto3" json:"is_resident,omitempty"`
	// Код сектора экономики [example: 07]
	EconomicSectorCode string `protobuf:"bytes,14,opt,name=economic_sector_code,json=economicSectorCode,proto3" json:"economic_sector_code,omitempty"`
	// Страна [example: KZ]
	Country string `protobuf:"bytes,15,opt,name=country,proto3" json:"country,omitempty"`
	// Описание [example: Описание платежа]
	Assign string `protobuf:"bytes,16,opt,name=assign,proto3" json:"assign,omitempty"`
	// Детали платежа
	DetailList []*Detail `protobuf:"bytes,17,rep,name=detail_list,json=detailList,proto3" json:"detail_list,omitempty"`
	// История платежа
	StateHistory  []*StateHistory `protobuf:"bytes,18,rep,name=state_history,json=stateHistory,proto3" json:"state_history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Employee) Reset() {
	*x = Employee{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *Employee) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Employee) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Employee) GetBirthDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Employee) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *Employee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Employee) GetPatronymic() string {
	if x != nil {
		return x.Patronymic
	}
	return ""
}

func (x *Employee) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Employee) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Employee) GetEstimatedAmount() int32 {
	if x != nil {
		return x.EstimatedAmount
	}
	return 0
}

func (x *Employee) GetKnpList() []string {
	if x != nil {
		return x.KnpList
	}
	return nil
}

func (x *Employee) GetIdn() string {
	if x != nil {
		return x.Idn
	}
	return ""
}

func (x *Employee) GetPeriod() *timestamppb.Timestamp {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Employee) GetIsResident() bool {
	if x != nil {
		return x.IsResident
	}
	return false
}

func (x *Employee) GetEconomicSectorCode() string {
	if x != nil {
		return x.EconomicSectorCode
	}
	return ""
}

func (x *Employee) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Employee) GetAssign() string {
	if x != nil {
		return x.Assign
	}
	return ""
}

func (x *Employee) GetDetailList() []*Detail {
	if x != nil {
		return x.DetailList
	}
	return nil
}

func (x *Employee) GetStateHistory() []*StateHistory {
	if x != nil {
		return x.StateHistory
	}
	return nil
}

// Detail - Детали платежа
type Detail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Тип деталей [example: SUB_KNP, PROCESS_ID, FINE_PAY, RAILWAYS_UNIFIED_ACCOUNT_NUMBER, RAILWAYS_THIRD_PARTY_IDN, RAILWAYS_DOCUMENT_ID ]
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Значение - результат
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Detail) Reset() {
	*x = Detail{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *Detail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Detail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Detail) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// StateHistory - История платежа
type StateHistory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор сущности история платежа
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Идентификатор сущности перевод
	IdTransfer int64 `protobuf:"varint,2,opt,name=id_transfer,json=idTransfer,proto3" json:"id_transfer,omitempty"`
	// Состояние(Статус) платежа [ CREATED, CONFIRMED, APPROVED, APPROVED_HALF, SENDED, BANK_ACCEPTED, APPROVED_BANK,
	// EXECUTED, ERROR, ANTIFRAUD_ERROR, DELETED, PARTIALLY_SIGNED, SIGNED, PRESENDED, DRAFT ]
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Кажется не применяется
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// Логин клиента
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// ФИО клиента [example: Жолтай Д.С.]
	FullName string `protobuf:"bytes,6,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// Дата + время события [dd-MM-yyyy HH:mm:ss, example: 01-01-2023 14:14:14]
	Datetime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// Канал [example: business-mobile]
	Channel string `protobuf:"bytes,8,opt,name=channel,proto3" json:"channel,omitempty"`
	// Хост кажется не применяется
	Host string `protobuf:"bytes,9,opt,name=host,proto3" json:"host,omitempty"`
	// Коммент что произошло во время смены статуса
	Comment       string `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateHistory) Reset() {
	*x = StateHistory{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateHistory) ProtoMessage() {}

func (x *StateHistory) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateHistory.ProtoReflect.Descriptor instead.
func (*StateHistory) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *StateHistory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StateHistory) GetIdTransfer() int64 {
	if x != nil {
		return x.IdTransfer
	}
	return 0
}

func (x *StateHistory) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StateHistory) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *StateHistory) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *StateHistory) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *StateHistory) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *StateHistory) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *StateHistory) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StateHistory) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ResponseTransfer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseTransfer) Reset() {
	*x = ResponseTransfer{}
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTransfer) ProtoMessage() {}

func (x *ResponseTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTransfer.ProtoReflect.Descriptor instead.
func (*ResponseTransfer) Descriptor() ([]byte, []int) {
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP(), []int{8}
}

var File_transfer_kzt_grpc_transfer_kzt_grpc_proto protoreflect.FileDescriptor

var file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDesc = []byte{
	0x0a, 0x29, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xab, 0x08, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x44, 0x6f, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x6e, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x6e,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x61,
	0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55,
	0x72, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a,
	0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52,
	0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x02,
	0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a,
	0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x62, 0x61, 0x6e,
	0x6b, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x22, 0xdd, 0x02, 0x0a, 0x08,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a,
	0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x62, 0x61, 0x6e,
	0x6b, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x04,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x62, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x62, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61,
	0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x86, 0x05, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79,
	0x6d, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x72, 0x6f,
	0x6e, 0x79, 0x6d, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6e, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x6e, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x42, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6,
	0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x32, 0xc4, 0x01, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4b, 0x5a, 0x54, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x22,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a,
	0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x23, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a, 0x74, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6b, 0x7a,
	0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescOnce sync.Once
	file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescData = file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDesc
)

func file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescGZIP() []byte {
	file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescOnce.Do(func() {
		file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescData)
	})
	return file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDescData
}

var file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_transfer_kzt_grpc_transfer_kzt_grpc_proto_goTypes = []any{
	(*RequestTransfer)(nil),       // 0: transfer_kzt_grpc.RequestTransfer
	(*Sender)(nil),                // 1: transfer_kzt_grpc.Sender
	(*Receiver)(nil),              // 2: transfer_kzt_grpc.Receiver
	(*Bank)(nil),                  // 3: transfer_kzt_grpc.Bank
	(*Intermediary)(nil),          // 4: transfer_kzt_grpc.Intermediary
	(*Employee)(nil),              // 5: transfer_kzt_grpc.Employee
	(*Detail)(nil),                // 6: transfer_kzt_grpc.Detail
	(*StateHistory)(nil),          // 7: transfer_kzt_grpc.StateHistory
	(*ResponseTransfer)(nil),      // 8: transfer_kzt_grpc.ResponseTransfer
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_transfer_kzt_grpc_transfer_kzt_grpc_proto_depIdxs = []int32{
	9,  // 0: transfer_kzt_grpc.RequestTransfer.value_date:type_name -> google.protobuf.Timestamp
	9,  // 1: transfer_kzt_grpc.RequestTransfer.doc_date:type_name -> google.protobuf.Timestamp
	9,  // 2: transfer_kzt_grpc.RequestTransfer.time_sent:type_name -> google.protobuf.Timestamp
	1,  // 3: transfer_kzt_grpc.RequestTransfer.sender:type_name -> transfer_kzt_grpc.Sender
	2,  // 4: transfer_kzt_grpc.RequestTransfer.receiver:type_name -> transfer_kzt_grpc.Receiver
	9,  // 5: transfer_kzt_grpc.RequestTransfer.period:type_name -> google.protobuf.Timestamp
	5,  // 6: transfer_kzt_grpc.RequestTransfer.employee_list:type_name -> transfer_kzt_grpc.Employee
	3,  // 7: transfer_kzt_grpc.Sender.bank:type_name -> transfer_kzt_grpc.Bank
	4,  // 8: transfer_kzt_grpc.Sender.intermediary:type_name -> transfer_kzt_grpc.Intermediary
	3,  // 9: transfer_kzt_grpc.Receiver.bank:type_name -> transfer_kzt_grpc.Bank
	4,  // 10: transfer_kzt_grpc.Receiver.intermediary:type_name -> transfer_kzt_grpc.Intermediary
	9,  // 11: transfer_kzt_grpc.Employee.birth_date:type_name -> google.protobuf.Timestamp
	9,  // 12: transfer_kzt_grpc.Employee.period:type_name -> google.protobuf.Timestamp
	6,  // 13: transfer_kzt_grpc.Employee.detail_list:type_name -> transfer_kzt_grpc.Detail
	7,  // 14: transfer_kzt_grpc.Employee.state_history:type_name -> transfer_kzt_grpc.StateHistory
	9,  // 15: transfer_kzt_grpc.StateHistory.datetime:type_name -> google.protobuf.Timestamp
	0,  // 16: transfer_kzt_grpc.TransferKZTService.Transfer:input_type -> transfer_kzt_grpc.RequestTransfer
	0,  // 17: transfer_kzt_grpc.TransferKZTService.CreateTransfer:input_type -> transfer_kzt_grpc.RequestTransfer
	8,  // 18: transfer_kzt_grpc.TransferKZTService.Transfer:output_type -> transfer_kzt_grpc.ResponseTransfer
	8,  // 19: transfer_kzt_grpc.TransferKZTService.CreateTransfer:output_type -> transfer_kzt_grpc.ResponseTransfer
	18, // [18:20] is the sub-list for method output_type
	16, // [16:18] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_transfer_kzt_grpc_transfer_kzt_grpc_proto_init() }
func file_transfer_kzt_grpc_transfer_kzt_grpc_proto_init() {
	if File_transfer_kzt_grpc_transfer_kzt_grpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transfer_kzt_grpc_transfer_kzt_grpc_proto_goTypes,
		DependencyIndexes: file_transfer_kzt_grpc_transfer_kzt_grpc_proto_depIdxs,
		MessageInfos:      file_transfer_kzt_grpc_transfer_kzt_grpc_proto_msgTypes,
	}.Build()
	File_transfer_kzt_grpc_transfer_kzt_grpc_proto = out.File
	file_transfer_kzt_grpc_transfer_kzt_grpc_proto_rawDesc = nil
	file_transfer_kzt_grpc_transfer_kzt_grpc_proto_goTypes = nil
	file_transfer_kzt_grpc_transfer_kzt_grpc_proto_depIdxs = nil
}
